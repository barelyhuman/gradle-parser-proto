{
  "buildscript": {
    "repositories": {
      "mavenCentral()": null,
      "maven": [
        "url http://download.crashlytics.com/maven"
      ]
    },
    "dependencies": {
      "classpath": [
        "com.android.tools.build:gradle:0.9.+",
        "com.crashlytics.tools.gradle:crashlytics-gradle:1.+"
      ]
    }
  },
  "apply": [
    "plugin: android"
  ],
  "tasks.withType(Compile)": {
    "options.encoding": [
      "= UTF-8"
    ]
  },
  "repositories": {
    "mavenCentral()": null,
    "maven": [
      "url http://download.crashlytics.com/maven"
    ]
  },
  "dependencies": {
    "compile": [
      "com.jakewharton:notificationcompat2:1.1.2",
      "com.android.support:support-v4:19.0.+",
      "com.android.support:appcompat-v7:19.0.+",
      "com.google.android.gms:play-services:4.1.+",
      "com.google.android.apps.dashclock:dashclock-api:+",
      "com.vandalsoftware.android:dslv:+",
      "project(:android-websockets)",
      "com.crashlytics.android:crashlytics:1.+",
      "com.fasterxml.jackson.core:jackson-databind:2.3.2",
      "files(libs/wearable-preview-support.jar)"
    ]
  },
  "=": {
    "def": [
      "getRevision = ->",
      "stdout = new ByteArrayOutputStream()"
    ],
    "exec": {
      "commandLine": [
        "git, rev-parse, --short, HEAD"
      ],
      "standardOutput": [
        "= stdout"
      ]
    },
    "return": [
      "stdout.toString().trim()"
    ]
  },
  "android": {
    "compileSdkVersion": [
      "19"
    ],
    "buildToolsVersion": [
      "19.0.3"
    ],
    "aaptOptions.useAaptPngCruncher": [
      "= true"
    ],
    "defaultConfig": {
      "minSdkVersion": [
        "8"
      ],
      "targetSdkVersion": [
        "19"
      ],
      "packageName": [
        "com.irccloud.android"
      ],
      "testPackageName": [
        "com.irccloud.android.test"
      ],
      "testInstrumentationRunner": [
        "android.test.InstrumentationTestRunner"
      ]
    },
    "signingConfigs": {
      "release": {
        "if(rootProject.file('keystore.properties').exists())": {
          "def": [
            "props = new Properties()"
          ],
          "props.load(new": [
            "FileInputStream(file(keystore.properties)))"
          ],
          "storeFile": [
            "= file(props[storeFile])"
          ],
          "storePassword": [
            "= props[storePassword]"
          ],
          "keyAlias": [
            "= props[keyAlias]"
          ],
          "keyPassword": [
            "= props[keyPassword]"
          ]
        }
      }
    },
    "lintOptions": {
      "abortOnError": [
        "false"
      ]
    },
    "buildTypes": {
      "debug": {
        "buildConfigField": [
          "String, HOST, \\www.irccloud.com\\",
          "boolean, ENTERPRISE, false",
          "String, SSL_CN, \\CN=*.irccloud.com,\\",
          "String, SSL_FP, \\8D3BE1983F75F4A4546F42F5EC189BC65A9D3A42\\"
        ],
        "versionNameSuffix": [
          "- + getRevision()"
        ],
        "if(rootProject.file('private.properties').exists())": {
          "def": [
            "props = new Properties()"
          ],
          "props.load(new": [
            "FileInputStream(file(private.properties)))"
          ],
          "buildConfigField": [
            "String, GCM_ID, \\ + props[GCM_ID] + \\",
            "String, IMGUR_KEY, \\ + props[IMGUR_KEY] + \\",
            "String, IMGUR_SECRET, \\ + props[IMGUR_SECRET] + \\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\ + props[CRASHLYTICS_KEY] + \\"
          ]
        },
        "else": {
          "buildConfigField": [
            "String, GCM_ID, \\\\",
            "String, IMGUR_KEY, \\\\",
            "String, IMGUR_SECRET, \\\\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\\\"
          ]
        },
        "resValue": [
          "string, IMAGE_SCHEME, irccloud-image",
          "string, IMAGE_SCHEME_SECURE, irccloud-image",
          "string, DISMISS_NOTIFICATION, com.irccloud.android.DISMISS_NOTIFICATION",
          "string, app_name, IRCCloud"
        ]
      },
      "release": {
        "buildConfigField": [
          "String, HOST, \\www.irccloud.com\\",
          "String, SSL_FP, \\8D3BE1983F75F4A4546F42F5EC189BC65A9D3A42\\",
          "boolean, ENTERPRISE, false",
          "String, SSL_CN, \\CN=*.irccloud.com,\\"
        ],
        "if(rootProject.file('private.properties').exists())": {
          "def": [
            "props = new Properties()"
          ],
          "props.load(new": [
            "FileInputStream(file(private.properties)))"
          ],
          "buildConfigField": [
            "String, GCM_ID, \\ + props[GCM_ID] + \\",
            "String, IMGUR_KEY, \\ + props[IMGUR_KEY] + \\",
            "String, IMGUR_SECRET, \\ + props[IMGUR_SECRET] + \\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\ + props[CRASHLYTICS_KEY] + \\"
          ]
        },
        "else": {
          "buildConfigField": [
            "String, GCM_ID, \\\\",
            "String, IMGUR_KEY, \\\\",
            "String, IMGUR_SECRET, \\\\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\\\"
          ]
        },
        "resValue": [
          "string, IMAGE_SCHEME, irccloud-image",
          "string, IMAGE_SCHEME_SECURE, irccloud-images",
          "string, DISMISS_NOTIFICATION, com.irccloud.android.DISMISS_NOTIFICATION",
          "string, app_name, IRCCloud"
        ],
        "if(rootProject.file('keystore.properties').exists())": {
          "signingConfig": [
            "signingConfigs.release"
          ]
        }
      },
      "enterprisedebug": {
        "packageNameSuffix": [
          ".enterprise"
        ],
        "versionNameSuffix": [
          "- + getRevision()"
        ],
        "buildConfigField": [
          "String, HOST, \\www.irccloud.com\\",
          "boolean, ENTERPRISE, true",
          "String, SSL_CN, \\\\",
          "String, SSL_FP, \\\\"
        ],
        "if(rootProject.file('enterprise.properties').exists())": {
          "def": [
            "props = new Properties()"
          ],
          "props.load(new": [
            "FileInputStream(file(enterprise.properties)))"
          ],
          "buildConfigField": [
            "String, GCM_ID, \\ + props[GCM_ID] + \\",
            "String, IMGUR_KEY, \\ + props[IMGUR_KEY] + \\",
            "String, IMGUR_SECRET, \\ + props[IMGUR_SECRET] + \\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\ + props[CRASHLYTICS_KEY] + \\"
          ]
        },
        "else": {
          "buildConfigField": [
            "String, GCM_ID, \\\\",
            "String, IMGUR_KEY, \\\\",
            "String, IMGUR_SECRET, \\\\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\\\"
          ]
        },
        "resValue": [
          "string, IMAGE_SCHEME, irccloud-enterprise-image",
          "string, IMAGE_SCHEME_SECURE, irccloud-enterprise-image",
          "string, DISMISS_NOTIFICATION, com.irccloud.android.DISMISS_NOTIFICATION",
          "string, app_name, IRCEnterprise"
        ],
        "signingConfig": [
          "signingConfigs.debug"
        ]
      },
      "enterpriserelease": {
        "packageNameSuffix": [
          ".enterprise"
        ],
        "buildConfigField": [
          "String, HOST, \\www.irccloud.com\\",
          "boolean, ENTERPRISE, true",
          "String, SSL_CN, \\\\",
          "String, SSL_FP, \\\\"
        ],
        "if(rootProject.file('enterprise.properties').exists())": {
          "def": [
            "props = new Properties()"
          ],
          "props.load(new": [
            "FileInputStream(file(enterprise.properties)))"
          ],
          "buildConfigField": [
            "String, GCM_ID, \\ + props[GCM_ID] + \\",
            "String, IMGUR_KEY, \\ + props[IMGUR_KEY] + \\",
            "String, IMGUR_SECRET, \\ + props[IMGUR_SECRET] + \\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\ + props[CRASHLYTICS_KEY] + \\"
          ]
        },
        "else": {
          "buildConfigField": [
            "String, GCM_ID, \\\\",
            "String, IMGUR_KEY, \\\\",
            "String, IMGUR_SECRET, \\\\"
          ],
          "resValue": [
            "string, CRASHLYTICS_KEY, \\\\"
          ]
        },
        "resValue": [
          "string, IMAGE_SCHEME, irccloud-enterprise-image",
          "string, IMAGE_SCHEME_SECURE, irccloud-enterprise-images",
          "string, DISMISS_NOTIFICATION, com.irccloud.android.DISMISS_NOTIFICATION",
          "string, app_name, IRCEnterprise"
        ],
        "if(rootProject.file('keystore.properties').exists())": {
          "signingConfig": [
            "signingConfigs.release"
          ]
        }
      }
    },
    "sourceSets": {
      "main.manifest.srcFile": [
        "AndroidManifest.xml"
      ],
      "main.java.srcDirs": [
        "= [src]"
      ],
      "main.resources.srcDirs": [
        "= [src]"
      ],
      "main.aidl.srcDirs": [
        "= [src]"
      ],
      "main.renderscript.srcDirs": [
        "= [src]"
      ],
      "enterprisedebug.res.srcDirs": [
        "= [enterprise-res]"
      ],
      "enterpriserelease.res.srcDirs": [
        "= [enterprise-res]"
      ],
      "main.res.srcDirs": [
        "= [res]"
      ],
      "main.assets.srcDirs": [
        "= [assets]"
      ],
      "androidTest": {
        "java.srcDirs": [
          "= [tests/src]"
        ],
        "res.srcDirs": [
          "= [tests/res]"
        ],
        "assets.srcDirs": [
          "= [tests/assets]"
        ],
        "resources.srcDirs": [
          "= [tests/src]"
        ]
      }
    },
    "packagingOptions": {
      "exclude": [
        "META-INF/LICENSE",
        "META-INF/NOTICE"
      ]
    }
  },
  "__filteredResources(type:Copy)": {
    "task": [
      "__filteredResources(type:Copy)"
    ],
    "from('res/')": {
      "exclude": [
        "drawable-xhdpi/splashlogo.png",
        "drawable-mdpi/ic_launcher.png",
        "drawable-hdpi/ic_launcher.png",
        "drawable-xhdpi/ic_launcher.png",
        "drawable-xxhdpi/ic_launcher.png",
        "drawable-xxxhdpi/ic_launcher.png"
      ]
    },
    "into": [
      "build/filtered_resources"
    ],
    "includeEmptyDirs": [
      "= true"
    ]
  },
  "tasks.whenTaskAdded": {
    "'mergeEnterprisereleaseResources')": {
      "if": [
        "(task.name == mergeEnterprisedebugResources || task.name == mergeEnterprisereleaseResources)"
      ],
      "task.dependsOn": [
        "__filteredResources"
      ]
    }
  }
}